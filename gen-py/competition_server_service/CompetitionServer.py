#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def watchCompetition(self, settings):
        """
        Parameters:
         - settings
        """
        pass

    def getUpdatedUserList(self, stub):
        """
        Parameters:
         - stub
        """
        pass

    def ackAlerts(self, stub, acked_alerts):
        """
        Parameters:
         - stub
         - acked_alerts
        """
        pass

    def updateCategories(self, stub, categories):
        """
        Parameters:
         - stub
         - categories
        """
        pass

    def updateTags(self, stub, tags):
        """
        Parameters:
         - stub
         - tags
        """
        pass

    def isWatching(self, stub):
        """
        Parameters:
         - stub
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def watchCompetition(self, settings):
        """
        Parameters:
         - settings
        """
        self.send_watchCompetition(settings)
        self.recv_watchCompetition()

    def send_watchCompetition(self, settings):
        self._oprot.writeMessageBegin('watchCompetition', TMessageType.CALL, self._seqid)
        args = watchCompetition_args()
        args.settings = settings
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_watchCompetition(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = watchCompetition_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getUpdatedUserList(self, stub):
        """
        Parameters:
         - stub
        """
        self.send_getUpdatedUserList(stub)
        return self.recv_getUpdatedUserList()

    def send_getUpdatedUserList(self, stub):
        self._oprot.writeMessageBegin('getUpdatedUserList', TMessageType.CALL, self._seqid)
        args = getUpdatedUserList_args()
        args.stub = stub
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUpdatedUserList(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUpdatedUserList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.notwatching is not None:
            raise result.notwatching
        if result.nre is not None:
            raise result.nre
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUpdatedUserList failed: unknown result")

    def ackAlerts(self, stub, acked_alerts):
        """
        Parameters:
         - stub
         - acked_alerts
        """
        self.send_ackAlerts(stub, acked_alerts)
        self.recv_ackAlerts()

    def send_ackAlerts(self, stub, acked_alerts):
        self._oprot.writeMessageBegin('ackAlerts', TMessageType.CALL, self._seqid)
        args = ackAlerts_args()
        args.stub = stub
        args.acked_alerts = acked_alerts
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ackAlerts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ackAlerts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def updateCategories(self, stub, categories):
        """
        Parameters:
         - stub
         - categories
        """
        self.send_updateCategories(stub, categories)
        self.recv_updateCategories()

    def send_updateCategories(self, stub, categories):
        self._oprot.writeMessageBegin('updateCategories', TMessageType.CALL, self._seqid)
        args = updateCategories_args()
        args.stub = stub
        args.categories = categories
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateCategories(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateCategories_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.notwatching is not None:
            raise result.notwatching
        return

    def updateTags(self, stub, tags):
        """
        Parameters:
         - stub
         - tags
        """
        self.send_updateTags(stub, tags)
        self.recv_updateTags()

    def send_updateTags(self, stub, tags):
        self._oprot.writeMessageBegin('updateTags', TMessageType.CALL, self._seqid)
        args = updateTags_args()
        args.stub = stub
        args.tags = tags
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateTags(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateTags_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.notwatching is not None:
            raise result.notwatching
        return

    def isWatching(self, stub):
        """
        Parameters:
         - stub
        """
        self.send_isWatching(stub)
        return self.recv_isWatching()

    def send_isWatching(self, stub):
        self._oprot.writeMessageBegin('isWatching', TMessageType.CALL, self._seqid)
        args = isWatching_args()
        args.stub = stub
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_isWatching(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = isWatching_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "isWatching failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["watchCompetition"] = Processor.process_watchCompetition
        self._processMap["getUpdatedUserList"] = Processor.process_getUpdatedUserList
        self._processMap["ackAlerts"] = Processor.process_ackAlerts
        self._processMap["updateCategories"] = Processor.process_updateCategories
        self._processMap["updateTags"] = Processor.process_updateTags
        self._processMap["isWatching"] = Processor.process_isWatching

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_watchCompetition(self, seqid, iprot, oprot):
        args = watchCompetition_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = watchCompetition_result()
        try:
            self._handler.watchCompetition(args.settings)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("watchCompetition", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUpdatedUserList(self, seqid, iprot, oprot):
        args = getUpdatedUserList_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUpdatedUserList_result()
        try:
            result.success = self._handler.getUpdatedUserList(args.stub)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except NotWatchingCompetitionException as notwatching:
            msg_type = TMessageType.REPLY
            result.notwatching = notwatching
        except LeaderboardServerNotReadyException as nre:
            msg_type = TMessageType.REPLY
            result.nre = nre
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUpdatedUserList", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ackAlerts(self, seqid, iprot, oprot):
        args = ackAlerts_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ackAlerts_result()
        try:
            self._handler.ackAlerts(args.stub, args.acked_alerts)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ackAlerts", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateCategories(self, seqid, iprot, oprot):
        args = updateCategories_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateCategories_result()
        try:
            self._handler.updateCategories(args.stub, args.categories)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except NotWatchingCompetitionException as notwatching:
            msg_type = TMessageType.REPLY
            result.notwatching = notwatching
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateCategories", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateTags(self, seqid, iprot, oprot):
        args = updateTags_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateTags_result()
        try:
            self._handler.updateTags(args.stub, args.tags)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except NotWatchingCompetitionException as notwatching:
            msg_type = TMessageType.REPLY
            result.notwatching = notwatching
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateTags", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_isWatching(self, seqid, iprot, oprot):
        args = isWatching_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = isWatching_result()
        try:
            result.success = self._handler.isWatching(args.stub)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("isWatching", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class watchCompetition_args(object):
    """
    Attributes:
     - settings
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'settings', (CompetitionSettings, CompetitionSettings.thrift_spec), None, ),  # 1
    )

    def __init__(self, settings=None,):
        self.settings = settings

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.settings = CompetitionSettings()
                    self.settings.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('watchCompetition_args')
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.STRUCT, 1)
            self.settings.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class watchCompetition_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('watchCompetition_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUpdatedUserList_args(object):
    """
    Attributes:
     - stub
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stub', 'UTF8', None, ),  # 1
    )

    def __init__(self, stub=None,):
        self.stub = stub

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUpdatedUserList_args')
        if self.stub is not None:
            oprot.writeFieldBegin('stub', TType.STRING, 1)
            oprot.writeString(self.stub.encode('utf-8') if sys.version_info[0] == 2 else self.stub)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUpdatedUserList_result(object):
    """
    Attributes:
     - success
     - notwatching
     - nre
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (User, User.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'notwatching', (NotWatchingCompetitionException, NotWatchingCompetitionException.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'nre', (LeaderboardServerNotReadyException, LeaderboardServerNotReadyException.thrift_spec), None, ),  # 2
    )

    def __init__(self, success=None, notwatching=None, nre=None,):
        self.success = success
        self.notwatching = notwatching
        self.nre = nre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = User()
                        _elem44.read(iprot)
                        self.success.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.notwatching = NotWatchingCompetitionException()
                    self.notwatching.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.nre = LeaderboardServerNotReadyException()
                    self.nre.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUpdatedUserList_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter45 in self.success:
                iter45.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notwatching is not None:
            oprot.writeFieldBegin('notwatching', TType.STRUCT, 1)
            self.notwatching.write(oprot)
            oprot.writeFieldEnd()
        if self.nre is not None:
            oprot.writeFieldBegin('nre', TType.STRUCT, 2)
            self.nre.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ackAlerts_args(object):
    """
    Attributes:
     - stub
     - acked_alerts
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stub', 'UTF8', None, ),  # 1
        (2, TType.MAP, 'acked_alerts', (TType.STRING, 'UTF8', TType.I32, None, False), None, ),  # 2
    )

    def __init__(self, stub=None, acked_alerts=None,):
        self.stub = stub
        self.acked_alerts = acked_alerts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.acked_alerts = {}
                    (_ktype47, _vtype48, _size46) = iprot.readMapBegin()
                    for _i50 in range(_size46):
                        _key51 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val52 = iprot.readI32()
                        self.acked_alerts[_key51] = _val52
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ackAlerts_args')
        if self.stub is not None:
            oprot.writeFieldBegin('stub', TType.STRING, 1)
            oprot.writeString(self.stub.encode('utf-8') if sys.version_info[0] == 2 else self.stub)
            oprot.writeFieldEnd()
        if self.acked_alerts is not None:
            oprot.writeFieldBegin('acked_alerts', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.I32, len(self.acked_alerts))
            for kiter53, viter54 in self.acked_alerts.items():
                oprot.writeString(kiter53.encode('utf-8') if sys.version_info[0] == 2 else kiter53)
                oprot.writeI32(viter54)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ackAlerts_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ackAlerts_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCategories_args(object):
    """
    Attributes:
     - stub
     - categories
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stub', 'UTF8', None, ),  # 1
        (2, TType.MAP, 'categories', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    )

    def __init__(self, stub=None, categories=None,):
        self.stub = stub
        self.categories = categories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.categories = {}
                    (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                    for _i59 in range(_size55):
                        _key60 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.categories[_key60] = _val61
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCategories_args')
        if self.stub is not None:
            oprot.writeFieldBegin('stub', TType.STRING, 1)
            oprot.writeString(self.stub.encode('utf-8') if sys.version_info[0] == 2 else self.stub)
            oprot.writeFieldEnd()
        if self.categories is not None:
            oprot.writeFieldBegin('categories', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.categories))
            for kiter62, viter63 in self.categories.items():
                oprot.writeString(kiter62.encode('utf-8') if sys.version_info[0] == 2 else kiter62)
                oprot.writeString(viter63.encode('utf-8') if sys.version_info[0] == 2 else viter63)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateCategories_result(object):
    """
    Attributes:
     - notwatching
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'notwatching', (NotWatchingCompetitionException, NotWatchingCompetitionException.thrift_spec), None, ),  # 1
    )

    def __init__(self, notwatching=None,):
        self.notwatching = notwatching

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.notwatching = NotWatchingCompetitionException()
                    self.notwatching.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCategories_result')
        if self.notwatching is not None:
            oprot.writeFieldBegin('notwatching', TType.STRUCT, 1)
            self.notwatching.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateTags_args(object):
    """
    Attributes:
     - stub
     - tags
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stub', 'UTF8', None, ),  # 1
        (2, TType.MAP, 'tags', (TType.STRING, 'UTF8', TType.LIST, (TType.STRING, 'UTF8', False), False), None, ),  # 2
    )

    def __init__(self, stub=None, tags=None,):
        self.stub = stub
        self.tags = tags

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.tags = {}
                    (_ktype65, _vtype66, _size64) = iprot.readMapBegin()
                    for _i68 in range(_size64):
                        _key69 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val70 = []
                        (_etype74, _size71) = iprot.readListBegin()
                        for _i75 in range(_size71):
                            _elem76 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                            _val70.append(_elem76)
                        iprot.readListEnd()
                        self.tags[_key69] = _val70
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateTags_args')
        if self.stub is not None:
            oprot.writeFieldBegin('stub', TType.STRING, 1)
            oprot.writeString(self.stub.encode('utf-8') if sys.version_info[0] == 2 else self.stub)
            oprot.writeFieldEnd()
        if self.tags is not None:
            oprot.writeFieldBegin('tags', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.tags))
            for kiter77, viter78 in self.tags.items():
                oprot.writeString(kiter77.encode('utf-8') if sys.version_info[0] == 2 else kiter77)
                oprot.writeListBegin(TType.STRING, len(viter78))
                for iter79 in viter78:
                    oprot.writeString(iter79.encode('utf-8') if sys.version_info[0] == 2 else iter79)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateTags_result(object):
    """
    Attributes:
     - notwatching
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'notwatching', (NotWatchingCompetitionException, NotWatchingCompetitionException.thrift_spec), None, ),  # 1
    )

    def __init__(self, notwatching=None,):
        self.notwatching = notwatching

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.notwatching = NotWatchingCompetitionException()
                    self.notwatching.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateTags_result')
        if self.notwatching is not None:
            oprot.writeFieldBegin('notwatching', TType.STRUCT, 1)
            self.notwatching.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class isWatching_args(object):
    """
    Attributes:
     - stub
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stub', 'UTF8', None, ),  # 1
    )

    def __init__(self, stub=None,):
        self.stub = stub

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stub = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('isWatching_args')
        if self.stub is not None:
            oprot.writeFieldBegin('stub', TType.STRING, 1)
            oprot.writeString(self.stub.encode('utf-8') if sys.version_info[0] == 2 else self.stub)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class isWatching_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('isWatching_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
